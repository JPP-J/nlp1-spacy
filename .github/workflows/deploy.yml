name: Deploy to ECS
on:
  workflow_run:
    workflows: ["CI - Test & Quality Checks"]
    types: [completed]
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}  
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}  
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}  
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  FAMILY_NAME: ${{ secrets.FAMILY_NAME }}
  ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}

jobs:
  deploy:
    name: Deploy to ECS Fargate
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
   
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
        
    - name: Prepare task definition
      run: |
        sed -i "s/\${FAMILY_NAME}/${{ env.FAMILY_NAME }}/g" task-definition.json
        sed -i "s/\${CONTAINER_NAME}/${{ env.CONTAINER_NAME }}/g" task-definition.json
        sed -i "s/\${ACCOUNT_ID}/${{ env.ACCOUNT_ID }}/g" task-definition.json
        sed -i "s/\${REGION}/${{ env.AWS_REGION }}/g" task-definition.json

        # Verify the replacements
        echo "Task definition after replacements:"
        cat task-definition.json
   
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.event.workflow_run.head_sha }}
   
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 10
   
    - name: Verify deployment
      run: |
        echo "ðŸš€ Deployment completed!"
        echo "Image deployed: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.event.workflow_run.head_sha }}"
       
        # Get service status
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].{ServiceName:serviceName,Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table