name: CI - Test & Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  SPACY_MODEL: en_core_web_sm
  PYTHON_VERSION: "3.11"
  ECR_REPOSITORY: fastapi-app

jobs:
  test:
    runs-on: ubuntu-latest
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
   
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
   
    - name: Cache pip dependencies
      uses: actions/cache@v4  # Updated to v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
   
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m spacy download ${{ env.SPACY_MODEL }}
   
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only .
      continue-on-error: true
   
    - name: Run tests with coverage
      run: |
        pip install pytest-cov
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
   
    # Optional: Upload coverage reports
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r app/ -f json || true
      continue-on-error: true

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
   
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
   
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
   
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build \
          --build-arg SPACY_MODEL=${{ env.SPACY_MODEL }} \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          .
       
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
   
    - name: Cleanup local images
      run: |
        docker image prune -f